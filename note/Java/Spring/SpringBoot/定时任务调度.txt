
●. 启动类使用 @EnableScheduling 注解，标明支持scheduling

●. 简单的单线程任务调度，在方法上使用@Scheduled来实现(当上一次任务没完成时，下一次任务是不会触发的)
    @Scheduled(cron = "0/5 * * * * ?")
    public void easyJob() {
        System.out.println("简单的单线程任务" + new Date());
    }

●. 多线程任务调度，通过SchedulingConfigurer接口来实现(每次都会额外开启一个线程去执行任务，不管上一次任务有没有完成)
    /**
     * 多线程的任务，每次都会额外开启一个线程去执行任务，不管上一次任务有没有完成
     */
    @Component
    public class TimerJob implements SchedulingConfigurer {

        @Override
        public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {
            // 设置定时任务并发执行(多任务并发执行，单任务的多次执行是串行)
            // 任务和任务之间通过线程次并发执行，同一个任务的多次执行是串行的(即上一个任务未执行完则下一个任务是不会触发的)
            scheduledTaskRegistrar.setScheduler(new ScheduledThreadPoolExecutor(3, new BasicThreadFactory.Builder().namingPattern("schedule-pool-%d").daemon(true).build()));
            scheduledTaskRegistrar.addTriggerTask(() -> {
                // 具体的业务逻辑
            }, triggerContext -> {
                //遵循cornTrigger规则
                Date nextTime = (new CronTrigger("0/5 * * * * ?")).nextExecutionTime(triggerContext);
                System.out.println("下次执行任务的时间是： " + nextTime);
                return nextTime;
            });
            //可以同时添加多个任务
        }
    }

●. 坑
    1). 配置为每天0点执行任务，但查看日志发现任务提前了两秒执行。细查之后发现，系统时间比互联网时间快了两秒。
        当时日志输出时间点为23:59.58，任务设置的执行时间为00:00:00。
        当时是有两个任务为00:00:00执行，两个任务都提前执行了，A任务的执行时间是由cron表达式计算得出，B任务的执行时间是Date对象。
            再两者都提前执行的情况下，A任务的下次执行时间为第二天的零点，而B任务仍然为当天当前日期的零点。
            日志输出内容：
                2019-11-12 23:59:58 ...... =======================产品到期提醒(生成任务)：开始==========================
                2019-11-12 23:59:58 ...... =======================标签变动提醒任务：开始==========================
                2019-11-12 23:59:58 ...... =======================产品到期提醒(生成任务)：结束==========================
                2019-11-12 23:59:58 ...... 产品到期提醒(生成任务)：下次执行时间Thu Nov 14 00:00:00 CST 2019
                2019-11-12 23:59:58 ...... =======================标签变动提醒任务：结束==========================
                2019-11-12 23:59:58 ...... 标签变动提醒任务：下次执行时间Thu Nov 13 00:00:00 CST 2019
            A：
                scheduledTaskRegistrar.addTriggerTask(() -> {
                    if (TaskJobUtils.checkIP()) {
                        logger.info("=======================产品到期提醒(生成任务)：开始==========================");
                        //具体业务
                        logger.info("=======================产品到期提醒(生成任务)：结束==========================");
                    }
                }, triggerContext -> {
                    Date date = new CronTrigger("0 0 1 * * ?").nextExecutionTime(triggerContext);
                    logger.info("产品到期提醒(生成任务)：下次执行时间{}", date);
                    return date;
                });
            B：
                scheduledTaskRegistrar.addTriggerTask(() -> {
                    if (TaskJobUtils.checkIP()) {
                        logger.info("=======================标签变动提醒任务：开始==========================");
                        //具体业务，当所有任务都完成后，会执行this.todayFinished = true;
                        logger.info("=======================标签变动提醒任务：结束==========================");
                    }
                }, triggerContext -> {
                    Date nextTime;
                    if (this.todayFinished) {
                        nextTime = DateUtils.getTomorrowTime(1, 0, 0).getTime();
                        this.todayFinished = false;
                    } else {
                        nextTime = (new CronTrigger("0 0/10 * * * ?")).nextExecutionTime(triggerContext);
                    }
                    logger.info("标签变动提醒任务：下次执行时间{}", nextTime);
                    return nextTime;
                });