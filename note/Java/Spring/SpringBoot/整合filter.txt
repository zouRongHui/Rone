

●. spring boot 整合filter的方式有两种：注解，配置类

●. 注解的方式整合
    1).启动类增加 @ServletComponentScan(通过注解注册Servlet、Filter、Listener) 注解
    2).自定义的filter增加 @WebFilter 注解
    eg.
        @SpringBootApplication
        @ServletComponentScan
        public class Application {
            public static void main(String[] args) {
                SpringApplication.run(Application.class, args);
            }
        }

        @Order(1)
        @WebFilter(urlPatterns = {"/*"})
        public class FirstFilter implements Filter {
            @Override
            public void init(FilterConfig filterConfig) throws ServletException {
                System.out.println("加载第一个过滤器");
            }
            @Override
            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
                System.out.println("第一个过滤器启动");
                filterChain.doFilter(servletRequest, servletResponse);
            }
            @Override
            public void destroy() {
                System.out.println("销毁第一个过滤器");
            }
        }

        @Order(2)
        @WebFilter(urlPatterns = {"/*"})
        public class SecondFilter implements Filter {
            @Override
            public void init(FilterConfig filterConfig) throws ServletException {
                System.out.println("加载第二个过滤器");
            }
            @Override
            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
                System.out.println("第二个过滤器启动");
                filterChain.doFilter(servletRequest, servletResponse);
            }
            @Override
            public void destroy() {
                System.out.println("销毁第二个过滤器");
            }
        }

●. 配置类方式整合
    1).在启动类中通过 @Bean 注解注册filter
    2).自定义的filter无需任何额外操作
    eg.
        @SpringBootApplication
        public class Application {

            public static void main(String[] args) {
                SpringApplication.run(Application.class, args);
            }

            @Bean
            public FilterRegistrationBean registerFirstFilter() {
                FilterRegistrationBean bean = new FilterRegistrationBean(new FirstFilter());
                bean.addUrlPatterns("/*");
                bean.setOrder(1);
                return bean;
            }

            @Bean
            public FilterRegistrationBean registerSecondFilter() {
                FilterRegistrationBean bean = new FilterRegistrationBean(new SecondFilter());
                bean.addUrlPatterns("/*");
                bean.setOrder(1);
                return bean;
            }
        }

        /** 自定义的filter无需任何操作 */

●. 当部分请求无需过滤时，解决方案有两
    1).将需要过滤的请求统一增加一层路径，然后将filter的配置改为只过滤该层以下的请求
        eg.将所有需要过滤的请求增加一层 /api 的路径，然后filter配置改为 @WebFilter(urlPatterns = {"/api/*"})
    2).在自定义的filter的doFilter()方法中通过代码忽略无需过滤的url
        eg.if (url.endsWith(".css")) {filterChain.doFilter(servletRequest, servletResponse);return;}