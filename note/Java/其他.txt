
●.final,finally,finalize
	final用来修饰类、方法、变量，Final类不能被继承方法，Final方法不能被重写，Final变量是不可变的；
	finally是和try{}catch{}配套使用，一般用来释放一些占用的资源；
	finalize是Object类的一个方法，用来实现对资源的回收。

●.&& 和 &
    && 只要不满足前面的条件，后面的条件就没有去判断
    & 不管前面的条件满足与否，他会判断所有的条件
    || 和 | 也是一样

●.static{} 静态代码块、{} 构造代码块、构造器constructor
    执行循序：static{} -> {} -> constructor
    其中 static{} 在该类被加载时即执行，例如在工具类中，在首次调用起静态方法前执行，后续调用该类的静态方法也不会再次执行 static{} 代码块
    Demo：org.rone.main.grammar.Others.test1

●.静态方法不会被子类重写。
    静态方法是通过类名调用，当父类和子类都有一个同名的静态方法(其参数一致)，此时在子类中父类的静态方法被隐藏。

●.自动装箱、自动装箱
    ●).自动装箱就可以简单的理解为将基本数据类型封装为对象类型，来符合java的面向对象
        //声明一个Integer对象
        Integer num = 10;
        //以上的声明就是用到了自动的装箱：解析为
        Integer num = new Integer(10);
      以上就是一个很好的体现，因为10是属于基本数据类型的，原则上它是不能直接赋值给一个对象Integer的，但jdk1.5后你就可以进行这样的声明。自动将基本数据类型转化为对应的封装类型。
    ●).自动拆箱：故名思议就是将对象重新转化为基本数据类型
    ●).坑
        三目运算符的nullPointerException，详见阿里巴巴java开发手册1.8.4
            由于基础数据类型的自动拆箱装箱机制导致的异常场景，例如下面
                boolean falseBoolean = false;
                Boolean nullBoolean = null;
                boolean trueBoolean = true;
                Boolean result = trueBoolean ? nullBoolean : falseBoolean;
                System.out.println(result);
