
●.规定元素的定位
    position 的值
        absolute 生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。
        fixed 生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。
        relative 生成相对定位的元素，相对于其正常位置进行定位。因此，"left:20" 会向元素的 LEFT 位置添加 20 像素。
        static	默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。
        inherit	规定应该从父元素继承 position 属性的值。
    案例：
        定位于浏览器底部
            position: fixed;
            bottom: 0px;
        定位于父容器的右上角
            position: absolute;
            right: 0px;

●.设置右对齐
    text-align:right

●.div设置重叠显示
    我们使用position实现绝对定位，对父级设置position:relative属性，对其子级设置position:absolute(按代码顺序重叠)加上left或right和top或bottom实现子级在父级内任意定位。
    也可手动设置z-index的值(整数)，值越大优先级越高(浮在前面)
    Demo：蓝色在最前面，其次黄色，最后红色
        <div style="position:relative; color:#000; border:1px solid #000; width:500px; height:400px">
        <div style="position:absolute; left:30px; top:30px; background:#F00; width:200px; height:100px">我背景为红色</div>
        <div style="position:absolute; left:50px; top:60px; background:#FF0; width:400px; height:200px">我背景为黄色</div>
        <div style="position:absolute; left:80px; top:80px; background:#00F; width:300px; height:300px">我背景为蓝色</div>

●.居中
    left: 50%;
    top: 50%;
    transform: translate(-50%,-50%);

●.设置滚动条
	强制设置出现滚动条
		overflow: scroll;//横向和纵向的滚动条都有
		overflow-x: scroll;//横向滚动条
		overflow-y: scroll;//纵向滚动条
	自动出现滚动条，当字内容超出高度限制时自动出现
		overflo: auto;
	禁用：overflow:hidden;

●.<a>标签去掉下划线
    text-decoration: none;

●.设置文本是否能被选中
    user-select：
        none:文本不能被选择
        auto:如下
            在 ::before 和 ::after 伪元素上，计算属性是 none
            如果元素是可编辑元素，则计算值是 contain
            否则，如果此元素的父元素的 user-select 的计算值为 all, 计算值则为 all
            否则，如果此元素的父级上的 user-select 的计算值为 none, 计算值则为 none
            否则，计算值则为 text
        text:可以选择文本
        all：当所有内容作为一个整体时可以被选择。如果双击或者在 上下文上点击子元素，那么被选择的部分将是以该子元素 向上回溯的最高祖先元素。

●.white-space 处理空格以及设置是否自动换行
	normal ：连续的空白符会被合并，换行符会被当作空白符来处理。填充line盒子时，必要的话会换行。
	nowrap ：和 normal 一样，连续的空白符会被合并。但文本内的换行无效。
	pre ：连续的空白符会被保留。在遇到换行符或者<br>元素时才会换行。
	pre-wrap ：连续的空白符会被保留。在遇到换行符或者<br>元素，或者需要为了填充line盒子时才会换行。
	pre-line ：连续的空白符会被合并。在遇到换行符或者<br>元素，或者需要为了填充line盒子时会换行。
	reference ：https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space

●.!important 标识强制最高级别的样式，若后面想要覆盖也需要加上。该配置试用所有样式
	eg.
	.test {width: 100px!important}
	<input type='text' class='test' style='width: 150px;'> //该元素的width: 150px;样式是不起作用的
	<input type='text' class='test' style='width: 150px;!important'> //加上了!important，会重新按照预定的级别来展现最终样式

●.百分比和绝对值组合配置宽度
	width: calc(100% - 50px);

●.设置间隔横线，用边框来实现
    border-top: 1px solid #ddd;

●.靠右/左
    float: right;

●.加粗
    font-weight: bold;

●.css用选择器选取第几个元素
    1、first-child：首个子元素，li:first-child{background:#090}
    2、last-child：最后一个子元素，li:last-child{background:#090}
    3、nth-child(3)：第3个子元素，li:nth-child(3){background:#090}
    4、nth-child(2n)：偶数位的子元素，即选择 第2、第4、第6……。
    5、nth-child(2n-1)：奇数位的子元素，即选择 第1、第3、第5、第7……。
    6、nth-child(n+3)：从第3个开始到最后一个。
    7、nth-child(-n+3)：从0到3，即小于3的标签。
    8、nth-last-child(3)：倒数第3个标签。

●.font-size 设置小于 12px 的字体时，发现并不生效
    原因是 Chrome 以及 Chromium 内核的浏览器在中文语言下最小字体只能是 12px，大部分浏览器都是如此。
    如果执意要设置小于 12px 的字体，那只能使用 transform: scale() 缩放属性来实现。
        transform: scale(0.5);

●.边框圆角
    border-radius ：同时设置4个边框的圆角样式。
        border-radius:20px; // 表示圆角的水平半径和垂直半径都为20px长度。
        border-radius:20px/40px; // 表示圆角的水平半径的长度为20px，垂直半径的长度为20px。
        border-radius:20%; // 表示圆角的水平半径和垂直半径都为各自边框长度的20%。
        border-radius:20%/30%; // 表示圆角的水平半径为边框宽度的20%，垂直半径都为边框高度的20%。
        border-radius:20px/30%; // 表示圆角的水平半径长度20px，垂直半径都为边框高度的20%。
    border-top-left-radius ：设置左上角边框的圆角样式。
    border-top-right-radius ：设置右上角边框的圆角样式。
    border-bottom-left-radius ：设置左下角边框的圆角样式。
    border-bottom-right-radius ：设置右下角边框的圆角样式。

●.用css实现箭头
    .arrow_up {// 向上的箭头
            // 此处可将左右的颜色设置上，以及上边框的配置也加上查看具体的边框原理
    		border-bottom: 10px solid red;// 底边框10px高度，即为箭头的高度，红色
    		border-left: 5px solid transparent;// 左边框5高度，无色
    		border-right: 5px solid transparent;// 左边框右高度，无色
    		position: relative;// 调整箭头位置
    		bottom: calc(50% + 3px);// 调整箭头位置
    	}
    	.arrow_down {// 向下的箭头
    		border-top: 10px solid green;
    		border-left: 5px solid transparent;
    		border-right: 5px solid transparent;
    		position: relative;
    		top: calc(50% + 3px);
    	}











