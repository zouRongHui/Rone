
●.定时执行
    setTimeout("test", 1000);//1000毫秒后执行一次test()方法，只运行一次
    setInterval("test", 2000);//每隔2000毫秒执行一次test()方法，运行多次

●.页面加载完成执行，等到页面内包括图片的所有元素加载完毕后才能执行
    window.onload = function (ev) {
        // do something
    }

●.转跳
    window.open(URL,name);
    URL     可选。打开指定的页面的URL。如果没有指定URL，打开与新的空白窗口
    name    可选。指定target属性或窗口的名称。支持以下值：
            _blank - URL加载到一个新的窗口。这是默认
            _parent - URL加载到父框架
            _self - URL替换当前页面
            _top - URL替换任何可加载的框架集
            name - 窗口名称

●.数值对象 保留小数
    数值对象.toFixed(num)

●.判断是否为空
    str == '' || typeof str === 'undefined' || str == null

●.创建数组
    eg.
    var childs = [];//一个数组
    childs.push("hello");//往数组中添加一个值
    var index = childs.indexOf("hello");//查找某个元素在数组中索引0开始
    var remove = childs.splice(index, count);//移除从index索引开始的count个元素并返回

●.实现模块可拖动
    纯js实现：
    //id为需要拖动的d元素的的id
    function dragFunc(id) {
        var Drag = document.getElementById(id);
        Drag.onmousedown = function(event) {
            var ev = event || window.event;
            event.stopPropagation();
            var disX = ev.clientX - Drag.offsetLeft;
            var disY = ev.clientY - Drag.offsetTop;
            document.onmousemove = function(event) {
                var ev = event || window.event;
                Drag.style.left = ev.clientX - disX + "px";
                Drag.style.top = ev.clientY - disY + "px";
                Drag.style.cursor = "move";
            };
        };
        Drag.onmouseup = function() {
            document.onmousemove = null;
            this.style.cursor = "default";
        };
    };

●.字符替换
    单个替换："yyyy-MM-dd-hh-mm-ss".replace("-","/") =>  "yyyy/MM-dd-hh-mm-ss"
    全部替换："yyyy-MM-dd-hh-mm-ss".replace(/-/g,"/")    =>  "yyyy/MM/dd/hh/mm/ss"

●.阻止form的submit
    preventDefault();

●.在if()的条件中，例如0、null、空字符串......会视为false，其他1、2、字符串...视为true

●.if(rone == undefined) 该语句会报错的
    判断某个变量是否被声明了，可使用if(typeof rone === 'undefined')

●.closest() 方法获得匹配选择器的第一个祖先元素(包括自己)。

●.onChange事件input元素的触发时机为焦点离开的时候。

●.给元素绑定事件
    document.addEventListener('click',function (e) {
        consol.log('原生事件绑定')
    });

●.in遍历数组
    var array = ['','',''];
    for (i in array) {
        console.log(i);//0,1,2
    }

●.字符串包含
    indexOf(childString)    返回某个指定的字符串值在字符串中首次出现的位置。如果要检索的字符串值没有出现，则该方法返回 -1。
        var str = "123"
        console.log(str.indexOf("2") != -1);// true
    match() 在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。
        var str = "123"
        var reg = RegExp(/3/);
        if(str.match(reg)){
         //包含；
        }
    search()    检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。
        var str = "123"
        console.log(str.search("2") != -1); // true
    test()  检索字符串中指定的值。返回 true 或 false。
        var str = "123"
        var reg = RegExp(/3/);
        console.log(reg.test(str) != -1); // true
    exec()  检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。
        var str = "123"
        var reg = RegExp(/3/);
        if(reg.exec(str)){
         //包含；
        }

●.原生js方法
    document.getElementById('form_downloadPDF').innerHTML = ''';//给指定元素配置子元素
    document.getElementById('form_downloadPDF').submit();//触发表单的提交

●.iframe嵌套结构中登录失效时，返回的登录页不是在top层级，而是嵌套在其中一个层级中
    解决方案：将页面强制刷新到最上级
    <!-- 解决登录页面嵌套问题 -->
    if (window != top){
        top.location.href = location.href;
    }

●.临时生成一个form表单触发交互然后移除掉
    var tempForm = document.createElement("form");
    tempForm.id = "tempForm";
    tempForm.method = "post";
    tempForm.action = "url"";

    var hideInput = document.createElement("input");
    hideInput.type = "hidden";
    hideInput.name = "name";
    hideInput.value = "value";
    tempForm.appendChild(hideInput);

    //添加临时form
    document.body.appendChild(tempForm);
    //必须手动的触发，否则只能看到页面刷新而没有打开新窗口
    tempForm.submit();
    //移除临时创建的form
    document.body.removeChild(tempForm);

●.页面重新加载   location.reload();

●.数字展示千分位
    console.log(String(1232323.110).replace(/(\d{1,3})(?=(\d{3})+(?:$|\.))/g,'$1,'));
    console.log(String(1232323.110).replace(/(?!^)(?=(\d{3})+(?:$|\.))/g,','));
    console.log(1232323.110.toLocaleString());
        数值千分位分隔，使用Number 对象的toLocaleString()方法实现
        Number("123456789.345").toLocaleString();

●.javascript获取json对象的key名称
    var json = {'name':'rone', 'sex':'man'};
    for (var key in json) {
        console.log(key);
    }