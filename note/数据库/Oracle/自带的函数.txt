
●. DECODE函数，同时也支持 DB2
	decode(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值)
	这个是decode的表达式，具体的含义解释为：
		IF 条件=值1 THEN
		　　　　RETURN(翻译值1)
		ELSIF 条件=值2 THEN
		　　　　RETURN(翻译值2)
		　　　　......
		ELSIF 条件=值n THEN
		　　　　RETURN(翻译值n)
		ELSE
		　　　　RETURN(缺省值)
		END IF
	demo：
	//用来实现按照name字段的['=1','(1,10]','(10,20]','(20,30]','(30,40]','(40,50]','>50', 其他]顺序排序
	ORDER BY "DECODE"(name, '=1', 1, '(1,10]', 2, '(10,20]', 3, '(20,30]', 4, '(30,40]', 5, '(40,50]', 6, '>50', 7, 99);

●. to_char()
    日期对象转字符串，to_char(日期对象, 日期的格式(详见to_date()说明))
        eg：select to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') as nowTime from dual;
    数字对象转字符串，to_char(数字，格式）
        格式：
            9	带有指定位数的值
            0	前导零的值
            .   小数点
            ,   分组（千）分隔符
            PR	尖括号内负值
            MI	在指明的位置的负号（如果数字 < 0）
            PL	在指明的位置的正号（如果数字 > 0）
            SG	在指明的位置的正/负号
        eg：
            to_char(485, '"Good number:"999')	'Good number: 485'
            to_char(485,'999')	' 485'
            to_char(-485,'999')	'-485'
            to_char(12,'9990999.9')	输出：' 0012.0'
            to_char(0.1,'0.9')	输出：' 0.1'
            to_char(0.1,'9.9')	输出：' .1'
            to_char(-0.1,'0.9')	输出：'-0.1'
            to_char(-0.1,'99.99')   输出：' -.10'
            to_char(148.5,'999.999')	' 148.500'
            to_char(1485,'9,999')	' 1,485'
            to_char(-485,'999PR')	'<485>'
            to_char(-485,'999MI')	'485-'
            to_char(485,'999MI')	'485'
            to_char(485,'PL999')	'+485'
            to_char(485,'SG999')	'+485'
            to_char(-485,'SG999')	'-485'
            to_char(-485,'9SG99')	'4-85'
            to_char(485,'9 9 9')	' 4 8 5'

●. to_number()   将字符串传唤成数字
    to_number(字符) 直接返回字符代表的数字，若字符非数字格式若报错ORA-01722
        eg：to_number('00345.89')    345.89
    to_number(字符, 格式(详见to_char()中数字格式)) 字符中的数字格式必须满足后面定义的格式，否则报错ORA-01722
        eg：to_number('00123456.78', '99999999.99')  123456.78

●. to_date()
    日期字符串转日期对象，to_date(日期字符串, 格式)
        格式：例如2020-04-27 15:45:33
            Year:
                yy	年份后两位，20
                yyy	年份后三位，020
                yyyy	四位年，2020
            Month:
                mm	两位月，04
                mon	字符集表示，04月
                month	字符集表示，04月
            Day:
                dd	当月第几天，27
                ddd	当年第几天
                dy	当周第几天简写，星期一
                day	当周第几天全写，星期一
            Hour:
                hh	12小时进制，03
                hh24	24小时进制，15
            Minute:
                mi	60进制，45
            Second:
                ss	60进制，33
            其它
                Q	季度，2
                WW	当年第几周
                W	当月第几周，5

●. round()
    对小数点后位数四舍五入，round(数字, 保留的小数点位数)
        eg.
        round(123.456, 0)	123
        round(123.456, 1)	123.5
    对日期数据，round(日期, 格式)
        格式：
            year、yyyy    舍入到某年的1月1日，即前半年舍去，后半年则年数+1
                round(to_date('2020-04-27 17:25:33', 'yyyy-mm-dd hh24:mi:ss'), 'year')  2020-01-01 00:00:00
            month   舍入到最近的月初
                round(to_date('2020-04-27 17:25:33', 'yyyy-mm-dd hh24:mi:ss'), 'month')  2020-05-01 00:00:00
            ddd、dd     舍入到最近的一天
                round(to_date('2020-04-27 17:25:33', 'yyyy-mm-dd hh24:mi:ss'), 'ddd')  2020-04-28 00:00:00
            day、d     舍入到最近的周的周日
                round(to_date('2020-04-27 17:25:33', 'yyyy-mm-dd hh24:mi:ss'), 'day')  2020-04-26 00:00:00
            hh24、hh 摄入到最近的小时
                round(to_date('2020-04-27 17:25:33', 'yyyy-mm-dd hh24:mi:ss'), 'day')  2020-04-26 17:00:00
            mi  舍入到最近的分钟
                round(to_date('2020-04-27 17:25:33', 'yyyy-mm-dd hh24:mi:ss'), 'day')  2020-04-26 17:26:00

●. NVL(expr1, expr2) 若expr1不为空(null、空字符)则返回expr1，否则返回expr2

●. NVL2(expr1, expr2, expr3) 若expr1不为空(null、空字符)则返回expr2，否则返回expr3

●. substr(string,start,length) 截取数据库某个字段中的一部分。与java不同，这里是从索引从1起始
	substr('123456',3,2);  结果是	34
	substr('123456',-3,2);  结果是	45
	substr('123456',0,2);  特殊，与下同
	substr('123456',1,2);  结果同为	12