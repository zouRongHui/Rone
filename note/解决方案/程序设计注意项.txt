
●.层级任务明确，那一层做哪些事？按照阿里的Java开发手册(6.1.1)归整。
    请求处理层 web/controller：提供本系统的接口，主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。
    开发API层 api：对外提供的，可直接封装 Service 接口暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。
    业务逻辑层 service：相对具体的业务逻辑服务层。
    通用逻辑层 manager：通用逻辑，对server层的抽象沉淀；封装第三方接口
    数据访问层 dao：与数据库的交互。
●.在业务处理中：
    区分主要业务流程以及次要业务流程(操作流水入库)，次要业务流程的报错不要影像主要业务流程。
    主要业务流程多步骤时，若出错在第三步骤要考虑前两个步骤的数据更改需要回滚，可将数据的更正统一到流程全部无报错的执行完成。
●.接口返回json格式时进行 封装。结构包括状态标志、状态值、数据。
●.编写注释
    1). interface和implement尽量都写上注释
    2). 新增的方法、类写上作者，修改方法、类表名修改内容、日期、作者以及一些必要的说明
●.集合类，尽量初始化容量，避免后续频繁的扩容操作（很占资源）。
●.使用异常机制处理一些异常情况。
	完善的一整套异常机制，永远不返回500，所有可知的和未知的异常都应该有处理方案，最好需要开发人员或者运维人员解决的异常做到可视化查看。-- 微信小程序
	异常抛出不要直接抛出Exception，按照代码需要处理的异常抛出，因为有些自定义的异常只是调用双方通信的一种方式便于在注释中说明也方便调用者捕获处理
●.前后端都需要对数据的正确性做校验。
●.可使用乐观锁来对并发不算高的数据进行加锁处理，例如使用hibernate框架时配合@version标签来使用乐观锁。
●.耗时较长且无需实时的操作可设计成定时任务在空闲时间执行，或使用异步线程池。
●.数据库连接池配置时考虑数据库or数据平台的处理能力，还需要考虑数据服务器的硬件资源。
●.可穷尽的变量使用枚举类，固定值使用静态变量。
●.业务逻辑设计时，尽量填写备注，说明当初这样设计的理由，便于后续改错or扩展。
●.作为服务提供方，可为每次客户的请求生成一个请求id，并返回该id给客户端。这样设计，便于出问题后能和客户端快速对接上出错的请求。-- 微信小程序
●.接口提供方，尽量不返回null值，如果实在无解可直接抛出异常。
●.数据库中表的设计，存储数值类型数据的字段就设置为数值类型，不要偷懒设置为字符串类型，一来效率问题，而来后续做数据分析时该字段作为条件不好处理。
●.分页查询，若数据为动态数据，要考虑一下源数据变动时数据的重复、丢失情况。
●.尽量不写“潜规则”代码，不可避免的一定要有注释or文档说明。
●.系统安全 - 实例(微信小程序)
    ●.发送短信的接口需要做限制，防止被别人攻击当做短信轰炸的平台。
        解决方案：对IP、手机号码做频率限制
    ●.全局越权操作，有权限限制的web系统，不能仅仅是让url不可见就行，需要做到代码层面的限制和判断。
        解决方案：在代码层面对用户每次的请求去判断是否有权限
    ●.用户名、密码安全，用户名、密码输错时由于给了不同的提示信息，攻击者可通过遍历得知所有的用户名信息。
        解决方案：用户名、密码输错时给出相同的提示即可
    ●.密码暴力破解，密码未做次数限制导致可暴力破解。
        解决方案：针对请求的IP、用户名做密码错误次数限制
    ●.存储型xss 攻击，将js代码存储到用户数据中，后续当其他用于操作该条数据时会在浏览器自动加载攻击的js代码
        解决方案：对用户输入的内容做过滤，在输出到页面时，对特殊字符等进行编码
        可使用如下的两个工具来实现过滤
            org.apache.commons.text.StringEscapeUtils.escapeHtml4(String)
            org.springframework.web.util.HtmlUtils.htmlEscape(String);










