package org.rone.core.dataStructure.avlTree;

/**
 * AVL树，平衡二叉树
 * ●.AVL树也叫平衡二叉树，它是一个二叉查找树，由于高度平衡所以AVL树的检索的时间复杂度就为树高 O(log(n))
 *     AVL树遵循高度平衡，任何节点的两个子树高度差不超过1。
 *     通过“平衡因子”来判断一颗二叉树是否符合高度平衡。
 *     平衡因子：该节点的左子树的深度减去它的右子树深度。
 *     只有当二叉树所有结点的平衡因子都是-1, 0, 1这三个值的时候，这颗二叉树才是一颗合格的AVL树。
 * ●.当元素的新增or移除破坏了AVL树的高度平衡时，AVL树会通过自旋来调整来回复平衡。
 *     AVL树操作模拟器：https://www.cs.usfca.edu/~galles/visualization/AVLtree.html
 *     当检查到某个节点平衡因子不满住要求时，即不在-1,0,1中的时候，需要自旋来恢复平衡。
 *     自旋分为以下四种情况，当前节点为 X ,左孩子为L,右孩子为R。详情见 AVL树的自旋示例图.jpg
 *     左左：当X的平衡因子大于0,且L的平衡因子也大于0
 *     左右：当X的平衡因子大于0,且L的平衡因子小于0
 *     右右：当X的平衡因子小于0,且R的平衡因子也小于0
 *     右左：当X的平衡因子小于0,且R的平衡因子大于0
 * @author rone
 */
public class AvlTree {
    // todo:
}
